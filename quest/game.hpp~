#pragma once
#include<iostream>
#include<cstdlib>
#include"player.cpp"
#include"StrayCat.cpp"

using namespace std;

template<class Enemy>
class Game{
	Player player;
	Enemy enemy;
public:
	enum CheckCommand{
		CONTINUE =0,
		INVALID_COMMAND,
		BATTLE_END,
		END,
	};
	Game();
	void Play();
	int Attack_Player();
	int Attack_Enemy();
	void ShowStatus();
private:
	void Ending(bool isPlayerWin);
};
template <class Enemy>
Game<Enemy>::Game(){
	cout<<enemy.GetName()<<"魔王が現れた！"<<endl<<endl;
	system("pause");
}
template <class Enemy>
void Game<Enemy>::Play(){
	while(true){
		system("cls");
		if(Attack_Player()==BATTLE_END)
			break;
		system("cls");
		if(Attack_Enemy()==BATTLE_END)
			break;
	}
}
template <class Enemy>
int Game<Enemy>::Attack_Player(){
	ShowStatus();
	if(player.InputCommand())
		enemy.Attacked(player.GetAtk(),player.GetHit());
	else return INVALID_COMMAND;
	if(!enemy.GetHP()){
	Ending(true);
	return BATTLE_END;
	}	
	system("pause");
	return CONTINUE;
}
template <class Enemy>
int Game<Enemy>::Attack_Enemy(){
	ShowStatus();
	if(enemy.InputCommand())
		player.Attacked(enemy.GetAtk(),enemy.GetHit());
	else return INVALID_COMMAND;
	if(!player.GetHP()){
	Ending(false);
	return BATTLE_END;
	}	
	system("pause");
	return CONTINUE;
}
template <class Enemy>
void Game<Enemy>::ShowStatus(){
	cout.width(20);
	cout.setf(ios::left,ios::adjustfield);
	cout<<"プレイヤー　HP"<<player.GetHP()<<"MP"<<player.GetMP()<<endl;
	cout.width(20);
	cout.setf(ios::left,ios::adjustfield);
	cout<<enemy.GetName();
	cout<<"魔王　HP"<<enemy.GetHP()<<"MP"<<enemy.GetMP()<<endl<<endl;
}
template<class Enemy>
void Game<Enemy>::Ending(bool isPlayerWin){
	if(isPlayerWin)	cout<<"プレイヤーの勝利！！"<<endl<<endl;
	else cout<<"ゲームオーバー"<<endl<<endl;
}

